#!/bin/ksh

# --- for debug --- #
date
export PS4=' $SECONDS + ' 
set -x

#######################################################
# The following variable could be defined in the 
# submission script (the ecf script *.sms, or ROCOTO *.xml),
# if not, they will take the default values which is set 
# for the NCO running enviroment
#######################################################

et the path to the gsi executable
export GSI=${GSI_ROOT}/HRRR_gsi_hyb

# Set the path to the GSI static files
export fixdir=${FIX_ROOT}

# Make sure DATAHOME is defined and exists
if [ ! "${SYSTEM_ID}" ]; then
  ${ECHO} "ERROR: $SYSTEM_ID is not defined!"
  SYSTEM_ID="RAP"
fi

if [ ! "${DATAHOME}" ]; then
  ${ECHO} "ERROR: \$DATAHOME is not defined!"
  exit 1
fi

#  PREPBUFR
if [ ! "${PREPBUFR}" ]; then
  ${ECHO} "ERROR: \$PREPBUFR is not defined!"
  exit 1
fi
if [ ! -d "${PREPBUFR}" ]; then
  ${ECHO} "ERROR: directory '${PREPBUFR}' does not exist!"
  exit 1
fi

#  NCEPSNOW
if [ ! "${NCEPSNOW}" ]; then  ${ECHO} "ERROR: \$NCEPSNOW is not defined!"
  exit 1
fi
if [ ! -d "${NCEPSNOW}" ]; then
  ${ECHO} "ERROR: directory '${NCEPSNOW}' does not exist!"
  exit 1
fi

# Make sure GSI_ROOT is defined and exists
if [ ! "${GSI_ROOT}" ]; then
  ${ECHO} "ERROR: \$GSI_ROOT is not defined!"
  exit 1
fi
if [ ! -d "${GSI_ROOT}" ]; then
  ${ECHO} "ERROR: GSI_ROOT directory '${GSI_ROOT}' does not exist!"
  exit 1
fi

# Make sure DATAHOME_BK is defined and exists
if [ ! "${DATAHOME_BK}" ]; then
  ${ECHO} "ERROR: \$DATAHOME_BK is not defined!"
  exit 1
fi
if [ ! -d "${DATAHOME_BK}" ]; then
  ${ECHO} "ERROR: DATAHOME_BK directory '${DATAHOME_BK}' does not exist!"
  exit 1
fi
# Check to make sure the number of processors for running GSI was specified
if [ -z "${GSIPROC}" ]; then
  ${ECHO} "ERROR: The variable $GSIPROC must be set to contain the number of processors to run GSI"
  exit 1
fi

# Check to make sure that STATIC_PATH exists
if [ ! -d ${STATIC_DIR} ]; then
  ${ECHO} "ERROR: ${STATIC_DIR} does not exist"
  exit 1
fi

# Check to make sure that ENKF_FCST exists
if [ ! -d ${ENKF_FCST} ]; then
  ${ECHO} "ERROR: ${ENKF_FCST} does not exist"
  exit 1
fi

# Check to make sure that FULLCYC exists
if [ ! "${FULLCYC}" ]; then
  ${ECHO} "ERROR: FULLCYC '${FULLCYC}' does not exist"
  exit 1
fi

# Make sure START_TIME is defined and in the correct format
if [ ! "${START_TIME}" ]; then
  ${ECHO} "ERROR: \$START_TIME is not defined!"
  exit 1
else
  if [ `${ECHO} "${START_TIME}" | ${AWK} '/^[[:digit:]]{10}$/'` ]; then
    export START_TIME=`${ECHO} "${START_TIME}" | ${SED} 's/\([[:digit:]]\{2\}\)$/ \1/'`
  elif [ ! "`${ECHO} "${START_TIME}" | ${AWK} '/^[[:digit:]]{8}[[:blank:]]{1}[[:digit:]]{2}$/'`" ]; then
    ${ECHO} "ERROR: start time, '${START_TIME}', is not in 'yyyymmddhh' or 'yyyymmdd hh' format"
    exit 1
  fi
  export START_TIME=`${DATE} -d "${START_TIME}"`
fi

# Make sure the GSI executable exists
if [ ! -x "${GSI}" ]; then
  ${ECHO} "ERROR: ${GSI} does not exist!"
  exit 1
fi

echo "Running system: ${SYSTEM_ID}"
# Compute date & time components for the analysis time
export YYYYJJJHH00=`${DATE} +"%Y%j%H00" -d "${START_TIME}"`
export YYYYJJJHH=`${DATE} +"%Y%j%H" -d "${START_TIME}"`
export YYYYMMDDHH=`${DATE} +"%Y%m%d%H" -d "${START_TIME}"`
export YYYYMMDD=`${DATE} +"%Y%m%d" -d "${START_TIME}"`
export YYJJJHH=`${DATE} +"%y%j%H" -d "${START_TIME}"`
export YYYY=`${DATE} +"%Y" -d "${START_TIME}"`
export MM=`${DATE} +"%m" -d "${START_TIME}"`
export DD=`${DATE} +"%d" -d "${START_TIME}"`
export HH=`${DATE} +"%H" -d "${START_TIME}"`


######################
# Execute the script.
######################
# ${exSCR_GSI_HYB:-$HOMErtma3d/scripts/${RUN}/ex${RUN}_gsi_hyb.ksh}
${HOMErtma3d}/scripts/exrtma3d_gsi_hyb.ksh
export err=$?; err_chk

msg="$0 of $job completed normally"
postmsg $jlogfile "$msg"

date

set +x
